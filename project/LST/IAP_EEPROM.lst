C51 COMPILER V9.01   IAP_EEPROM                                                            03/30/2023 10:09:10 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE IAP_EEPROM
OBJECT MODULE PLACED IN .\Output\IAP_EEPROM.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE ..\bsp\IAP_EEPROM.c LARGE OPTIMIZE(7,SPEED) BROWSE INCDIR(..\Library\Device
                    -\Include;..\Library\StdDriver\inc;..\user;..\driver;..\bsp;..\Include;..\common) DEBUG OBJECTEXTEND PRINT(.\LST\IAP_EEPR
                    -OM.lst) TABS(2) OBJECT(.\Output\IAP_EEPROM.obj)

line level    source

   1          /*
   2           * IAP_EEPROM.c
   3           *
   4           *  Created on: 2020年3月8日
   5           *      Author: Administrator
   6           */
   7          #include "common.h"
   8          #include "uart.h"
   9          #include "iap_eeprom.h"
  10          
  11          //Erase APROM DATAFLASH page
  12          void erase_aprom_page(UINT8 page)
  13          {
  14   1        UINT16 u16_addr=FLASH_ADDR_BASE + (0x80<<page);
  15   1        IAPAL = u16_addr&0xff;
  16   1        IAPAH = ((u16_addr)>>8)&0xff;
  17   1        IAPFD = 0xFF;
  18   1        set_IAPEN;
  19   1        set_APUEN;
  20   1        IAPCN = 0x22;
  21   1        set_IAPGO;
  22   1      }
  23          
  24          
  25          void write_aprom_page(UINT8 page, UINT8 *buf, UINT8 len)  
  26          {
  27   1      UINT8 i;
  28   1      // bit BIT_TMP;//~2.2
  29   1      UINT16 u16_addr=FLASH_ADDR_BASE +(0x80<<page);//(0x80<<page);/2023.1.30 //数组写 //(page)->(0x80<<page) 20
             -23.2.6
  30   1      set_IAPEN;
  31   1      set_APUEN;
  32   1        
  33   1      //BIT_TMP=EA; //2.2~~~~~~
  34   1      //EA=0;
  35   1        
  36   1       IAPCN = 0x21;
  37   1       for(i=0;i<len;i++)
  38   1       {
  39   2         IAPAL = (u16_addr&0xff)+i;
  40   2         IAPAH = (u16_addr>>8)&0xff;
  41   2         IAPFD = buf[i];
  42   2         set_IAPGO;
  43   2       }
  44   1       
  45   1      
  46   1       
  47   1       clr_APUEN;
  48   1       clr_IAPEN;
  49   1       
  50   1      // EA = BIT_TMP;//2.2~~~
  51   1       
  52   1      }
C51 COMPILER V9.01   IAP_EEPROM                                                            03/30/2023 10:09:10 PAGE 2   

  53          
  54          
  55          
  56          void read_aprom_page(UINT8 page, UINT8 *buf, UINT8 len)
  57          {
  58   1       UINT8 i;
  59   1       UINT8 code *ptr=FLASH_ADDR_BASE +(0x80<<page);//(0x80<<page);//2023.1.30，数组读 //(page)->(0x80<<page);2
             -023.2.6
  60   1        for(i=0;i<len;i++)
  61   1        {
  62   2          buf[i] = ptr[i];
  63   2        }
  64   1      }
  65          
  66          
  67          
  68          
  69          /**
  70           * 返回值:成功 1,失败0
  71           */
  72          UINT8 test_iaprom(void)
  73          {
  74   1      #if(0)
                UINT8 i;
                UINT8 buf[128];
                erase_aprom_page(0);
                for(i=0;i<128;i++)
                {
                buf[i]=i;
                }
                write_aprom_page(0,&buf[0],128);
                for(i=0;i<128;i++)
                {
                buf[i]=0;
                }
                read_aprom_page(0,&buf[0],128);
              
                for(i=0;i<128;i++)
                {
                  debug_printf("\r\n[");
                  debug_printf_d(i);
                  debug_printf("]= ");
                  debug_printf_d(buf[i]);
                }
              
                for(i=0;i<128;i++)
                {
                  if(buf[i] !=i)
                  {
                    debug_printf("\r\n test fail\r\n");
                    return 0;
                    //break;
                  }
                }
              
                debug_printf("\r\n test successful\r\n");
                return 1;
              #else
 110   1        return 0;
 111   1      #endif
 112   1        
 113   1      }
C51 COMPILER V9.01   IAP_EEPROM                                                            03/30/2023 10:09:10 PAGE 3   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    363    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
