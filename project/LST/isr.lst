C51 COMPILER V9.01   ISR                                                                   03/30/2023 10:09:09 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE ISR
OBJECT MODULE PLACED IN .\Output\isr.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE ..\bsp\isr.c LARGE OPTIMIZE(7,SPEED) BROWSE INCDIR(..\Library\Device\Includ
                    -e;..\Library\StdDriver\inc;..\user;..\driver;..\bsp;..\Include;..\common) DEBUG OBJECTEXTEND PRINT(.\LST\isr.lst) TABS(2
                    -) OBJECT(.\Output\isr.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2019 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Website: http://www.nuvoton.com
   9          //  E-Mail : MicroC-8bit@nuvoton.com
  10          //  Date   : Jan/21/2019
  11          //********************************************************************************************************
             -***
  12          
  13          //********************************************************************************************************
             -***
  14          //  File Function: MS51 ADC / Bandgap input demo code
  15          //********************************************************************************************************
             -***
  16          
  17          #include "common.h"
  18          #include "uart_frame.h"
  19          #include "queue.h"
  20          #include "treadmills.h"
  21          
  22          #if(0)
              /*all interrupt subroutine list */
              //--------------------------------------------------------------------------------------------------------
             ----
              void INT0_ISR(void) interrupt 0          // Vector @  0x03
              {
                  clr_TCON_IE0;
              }
              //--------------------------------------------------------------------------------------------------------
             ----
              void Timer0_ISR(void) interrupt 1        // Vector @  0x0B
              {
                  clr_TCON_TF0;
                  TH0 = (TIMER_DIV12_VALUE_1ms)/256;
                 TL0 = (TIMER_DIV12_VALUE_1ms)%256;
              }
              //--------------------------------------------------------------------------------------------------------
             ----
              void INT1_ISR(void) interrupt 2          // Vector @  0x13
              {
                  clr_TCON_IE1;
              }
              //--------------------------------------------------------------------------------------------------------
C51 COMPILER V9.01   ISR                                                                   03/30/2023 10:09:09 PAGE 2   

             ----
              void Timer1_ISR(void) interrupt 3        // Vector @  0x1B
              {
                  clr_TCON_TF1;
              }
              //--------------------------------------------------------------------------------------------------------
             ----
              void UART0_ISR(void) interrupt 4         // Vector @  0x23
              {
                  clr_SCON_RI;
                  clr_SCON_TI;
              }
              //--------------------------------------------------------------------------------------------------------
             ----
              void Timer2_ISR(void) interrupt 5        // Vector @  0x2B
              {
                  clr_T2CON_TF2;
              }
              //--------------------------------------------------------------------------------------------------------
             ----
              void I2C_ISR(void) interrupt 6           // Vector @  0x33
              {
                  clr_I2CON_SI;
              }
              //--------------------------------------------------------------------------------------------------------
             ----
              void Pin_INT_ISR(void) interrupt 7       // Vector @  0x3B
              {
                  PIF = 0;
              }
              //--------------------------------------------------------------------------------------------------------
             ----
              void BOD_ISR(void) interrupt 8           // Vector @  0x43
              {
                  clr_BODCON0_BOF;
              }
              //--------------------------------------------------------------------------------------------------------
             ----
              void SPI_ISR(void) interrupt 9           // Vector @  0x4B
              {
                  clr_SPSR_SPIF;
              }
              //--------------------------------------------------------------------------------------------------------
             ----
              void WDT_ISR(void) interrupt 10          // Vector @  0x53
              {
                  clr_WDCON_WDTF;
              }
              //--------------------------------------------------------------------------------------------------------
             ----
              void ADC_ISR(void) interrupt 11          // Vector @  0x5B
              {
                  clr_ADCCON0_ADCF;
              }
              //--------------------------------------------------------------------------------------------------------
             ----
              void Capture_ISR(void) interrupt 12      // Vector @  0x63
              {
                  clr_CAPCON0_CAPF0;
                  clr_CAPCON0_CAPF1;
                  clr_CAPCON0_CAPF2;
              }
C51 COMPILER V9.01   ISR                                                                   03/30/2023 10:09:09 PAGE 3   

              //--------------------------------------------------------------------------------------------------------
             ----
              void PWM_Brake_ISR(void) interrupt 14    // Vector @  0x73
              {
                  clr_FBD_FBF;
              }
              //--------------------------------------------------------------------------------------------------------
             ----
              void UART1_ISR(void) interrupt 15         // Vector @  0x7B
              {
                  clr_SCON_1_RI_1;
                  clr_SCON_1_TI_1;
              }
              //--------------------------------------------------------------------------------------------------------
             ----
              void Timer3_ISR(void) interrupt 16        // Vector @  0x83
              {
                  clr_T3CON_TF3;
              }
              //--------------------------------------------------------------------------------------------------------
             ----
              void WKT_ISR(void) interrupt 17           // Vector @  0x8B
              {
                  clr_WKCON_WKTF;
              }
              
              
              //--------------------------------------------------------------------------------------------------------
             ----
              void main(void)
              {
                  while(1);
              }
              
              #else 
 124          
 125          UINT8  ms10_flag=0;
 126          UINT8  ms50_flag = 0;
 127          UINT8  ms100_flag=0;
 128          UINT8  ms500_flag=0;
 129          UINT8  ms1000_flag=0;
 130          
 131          void Timer0_ISR(void) interrupt 1        // Vector @  0x0B
 132          {
 133   1        static UINT16 cnt1=0;
 134   1        static UINT16 cnt2=0;
 135   1        static UINT16 cnt3=0;
 136   1        static UINT16 cnt4=0;  //~~~~3.29
 137   1        
 138   1          //clr_TCON_TF0;
 139   1        TH0 = (TIMER_DIV12_VALUE_10ms>>8);
 140   1        TL0 = (TIMER_DIV12_VALUE_10ms);
 141   1        
 142   1          ms10_flag=1;
 143   1        cnt1++;
 144   1        if(cnt1>10)//100ms=10
 145   1        {
 146   2            cnt1=0;
 147   2            ms100_flag=1;
 148   2        }
 149   1        
 150   1        
C51 COMPILER V9.01   ISR                                                                   03/30/2023 10:09:09 PAGE 4   

 151   1        
 152   1        
 153   1        
 154   1          cnt2++;
 155   1        if(cnt2>50)//250ms 25
 156   1        {
 157   2          cnt2=0;
 158   2            ms500_flag=1;
 159   2        }
 160   1        
 161   1        
 162   1        cnt3++;
 163   1        if(cnt3>99)//1000ms//99:1Ð¡Ê±Âý30Ãë
 164   1        {
 165   2            cnt3=0;
 166   2            ms1000_flag=1;
 167   2        }
 168   1        
 169   1        cnt4++;
 170   1        if(cnt4 > 5) //50ms  
 171   1        {
 172   2          cnt4 = 0;
 173   2          ms50_flag = 1;
 174   2      
 175   2        }
 176   1        
 177   1        
 178   1      }
 179          
 180          
 181          void UART0_ISR(void) interrupt 4         // Vector @  0x23
 182          {
 183   1        u8 dat;
 184   1      
 185   1        //     if (TI)
 186   1        //      {
 187   1        //          clr_SCON_TI;                                       // Clear TI (Transmit Interrupt).
 188   1        //      }
 189   1        //
 190   1      
 191   1          if (RI)
 192   1          {
 193   2           //treadmills.ack=1;
 194   2            dat = SBUF;
 195   2            Enter_queue(&rx_queue,dat);
 196   2            clr_RI;                                         // Clear RI (Receive Interrupt).
 197   2          }
 198   1      }
 199          
 200          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    255    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     13    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
